[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial



# Imports
const VirtualJoyStick := preload('res://src/VirtualJoystick/VirtualJoystick.gd')


# Declarations
var ViewingSpeed : float = 5.0
var MovementSpeed : float = 25.0
var MovementAccelerator : float = 3

var Possessing : bool = false
var PossessingEntity : Entity setget set_possessing_entity
func set_possessing_entity(entity) -> void:
	if entity is Entity:
		Possessing = true
		PossessingEntity = entity
	else:
		Possessing = false
		PossessingEntity = null



# Core
func _ready(): Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _input(event):
	if event is InputEventKey and not event.pressed:
		match event.scancode:
			KEY_ESCAPE: Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE) if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED else Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	
	if not get_node('/root/HUD').is_chatting() and not Possessing and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		if event is InputEventMouseMotion:
			rotation.x += deg2rad(event.relative.normalized().y * ViewingSpeed * -1)
			rotation.y += deg2rad(event.relative.normalized().x * ViewingSpeed * -1)

func _process(delta):
#	if OS.has_touchscreen_ui_hint() or true:
#		if (get_node('/root/HUD').get_left_joystick() as VirtualJoyStick).Distance > 0: print('moving left')
	
	if not get_node('/root/HUD').is_chatting() and not Possessing:
		var movement = Vector3()
		
		if Input.is_action_pressed('player_forward') or (get_node('/root/HUD').get_left_joystick() as VirtualJoyStick).Distance > 0: movement += Vector3.FORWARD
		if Input.is_action_pressed('player_backwards'): movement += Vector3.BACK
		if Input.is_action_pressed('player_right'): movement += Vector3.RIGHT
		if Input.is_action_pressed('player_left'): movement += Vector3.LEFT
		
		if Input.is_action_pressed('player_boost'): movement *= MovementAccelerator
		
		translate(movement * MovementSpeed * delta)
"

[node name="Player" type="Spatial"]
script = SubResource( 1 )

[node name="Camera" type="Camera" parent="."]
